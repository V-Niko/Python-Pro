# Домашнє завдання №16 від 21.08.2022р.
# Exercise 1. Дополните класс Группа (задание Лекции 2)
# возможностью поддержки итерационного протокола
#python дополнить класс с возможностью поддержки итерационного протокола
#print("Exercise 1.")

# Exercise 2.Модифицируете класс Заказ (задание Лекции 1)
# добавив реализацию протокола последовательностей и
# итерационного протокола.
print("\nExercise 2.")

class Product():
    def __init__(self, country, industry_type, color, price):
        """Ініціалізація товару"""
        self.country = country
        self.industry_type = industry_type
        self.color = color
        self.price = price
        self.index = 0

    def description_name(self):
        """Опис товару"""
        desc = self.country + ' ' + self.industry_type + ' ' + self.color + ' ' + str(self.price)

    def __next__(self):
        if self.index < len(self, country, industry_type, color, price):
            self.index = self.index + 1
            return self.country + ' ' + self.industry_type + ' ' + self.color + ' ' + str(self.price)[self.index - 1]
        else:
            raise StopIteration

    def __iter__(self):
        return self

    def __str__(self):
       return f'{self.country} {self.industry_type} {self.price}'

my_products_1 = Product('China', 'clothing', 'white', 40)
my_products_2 = Product('Vietnam', 'appliances', 'green', 240)
my_products_3 = Product('Japan', 'record player', 'grey', 1300)

print('1.',my_products_1.country,',', my_products_1.industry_type,',',
      my_products_1.color,',', my_products_1.price,'Euro',';')

print('2.',my_products_2.country,',', my_products_2.industry_type,',',
      my_products_2.color,',', my_products_2.price,'USD',';')

print('3.',my_products_3.country,',', my_products_3.industry_type,',',
      my_products_3.color,',', my_products_3.price,'Yen',';')

# Exercise 2. Создайте класс «Покупатель». В качестве полей
# можете использовать фамилию, имя, отчество, мобильный телефон и т. д.
print("\nExercise 2.")

class Buyer():
    def __init__(self, country, city, name, surname, gender,
                 email, interests, telephone):
        """Ініціалізація Покупця"""
        self.country = country
        self.city = city
        self.name = name
        self.surname = surname
        self.gender = gender
        self.email = email
        self.interests = interests
        self.telephone = telephone

    def description_name(self):
        """Опис Покупця"""
        desc = self.country + ' ' + self.city + ' ' + self.name\
               + ' ' + self.surname + ' ' + self.gender + ' ' \
               + self.email + ' ' + self.interests + ' ' + str(self.telephone)

    def __str__(self):
        return f'{self.name} {self.surname}'

buyer_1 = Buyer('China', 'Beijing', 'Jackie', 'Chan', 'male',
                'chan@gmail.com','arts', +86101234567)

buyer_2 = Buyer('Vietnam', 'Hanoi', 'Maung', 'Tin', 'male',
                'tin@gmail.com', 'drinks', +86101234568)

buyer_3 = Buyer('Japan', 'Tokyo', 'Takeshi', 'Kitano', 'male',
                'kitano@gmail.com', 'cars', +86101234569)

print('1.',buyer_1.country,',', buyer_1.city,',', buyer_1.name,',',
      buyer_1.surname,',', buyer_1.gender,',', buyer_1.email,',',
      buyer_1.interests,',', buyer_1.telephone,';')

print('2.',buyer_2.country,',', buyer_2.city,',', buyer_2.name,',',
      buyer_2.surname,',', buyer_2.gender,',', buyer_2.email,',',
      buyer_2.interests,',', buyer_2.telephone,';')

print('3.',buyer_3.country,',', buyer_3.city,',', buyer_3.name,',',
      buyer_3.surname,',', buyer_3.gender,',', buyer_3.email,',',
      buyer_3.interests,',', buyer_3.telephone,';')

class Order():
    def __init__(self, buyer: Buyer = None):
        """Ініціалізація замовлення"""
        self.buyer = buyer
        self.products = []
        self.weight = []
        self.quantities = []
        self.products_list = []

    def add_product(self, product: Product, weight: int or float,
                    quantity: int or float):
        if product in self.products:
            index = self.products.index(product)
            self.weight[index] += weight
            """ weight - це вага товару"""
            self.quantities[index] += quantity
            """ quantities - це кількість товару"""
        else:
            self.products.append(product)
            self.weight.append(weight)
            self.quantities.append(quantity)

    def total(self):
        res = 0
        for index, item in enumerate(self.products):
            res += item.price * self.quantities[index]
        return res

    def __str__(self):
        res = f'{self.buyer}\n'

        for index, item in enumerate(self.products):
            res += f'\t{item} x {self.quantities[index]} = {item.price * self.quantities[index]} грн.\n'
        res += f'Total price: {self.total()} грн.'
        return res

    def __iter__(self):
        return OrderIterator(self.products_list)


my_product_1 = Product('China', 'clothing', 'white', 40)
my_product_2 = Product('Vietnam', 'vegetables', 'green', 240)
my_product_3 = Product('Japan', 'car', 'grey', 13000)

buyer_1 = Buyer('China', 'Beijing', 'Jackie', 'Chan', 'male',
                'chan@gmail.com','arts', +86101234567)
buyer_2 = Buyer('Vietnam', 'Hanoi', 'Maung', 'Tin', 'male',
                'tin@gmail.com', 'drinks', +86101234568)
buyer_3 = Buyer('Japan', 'Tokyo', 'Takeshi', 'Kitano', 'male',
                'kitano@gmail.com', 'cars', +86101234569)

order_1 = Order(buyer_1)
order_2 = Order(buyer_2)
order_3 = Order(buyer_3)

order_1.add_product(my_product_1, 7, 2)
order_1.add_product(my_product_2, 6, 2)
order_1.add_product(my_product_3, 1, 1)

order_2.add_product(my_product_1, 7, 2)
order_2.add_product(my_product_2, 6, 2)
order_2.add_product(my_product_3, 1, 1)

order_3.add_product(my_product_1, 7, 2)
order_3.add_product(my_product_2, 6, 2)
order_3.add_product(my_product_3, 1, 1)

print('1.', my_product_1)
print('2.', my_product_2)
print('3.', my_product_3)

print('\n1.',buyer_1)
print('2.',buyer_2)
print('3.',buyer_3)

print('\n1.',order_1)
print('\n2.',order_2)
print('\n3.',order_3)
